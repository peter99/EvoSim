/* I don't think we need this. Good to separate the different gene combinations though. Can be used to determine gene combos later */
/* Taken from MonoHybrid class, method fuseTwo() */
        for(int i = 0; i < 4; i++) {
            if (Character.isUpperCase(offSpringString[i].charAt(0)) && Character.isUpperCase(offSpringString[i].charAt(1))) {
                System.out.println(offSpringString[i]);
            }
        }
        for(int i = 0; i < 4; i++) {
            if (Character.isUpperCase(offSpringString[i].charAt(0)) && Character.isLowerCase(offSpringString[i].charAt(1))) {
                System.out.println(offSpringString[i]);
            }
        }
        for(int i = 0; i < 4; i++) {
            if (Character.isLowerCase(offSpringString[i].charAt(0)) && Character.isLowerCase(offSpringString[i].charAt(1))) {
                System.out.println(offSpringString[i]);
            }
        }

        /*Removed from MonoHybrid class. Buggy, difficult to maintain*/

         /*for (int z = 0; z < 4; z++) {                                                                                   //Iterates over the offSpringString count
                    for (int gameteFuseBothWith0 = 2; gameteFuseBothWith0 < 4; gameteFuseBothWith0++) {                         //Iterates over both genes of p2
                        offSpring[z] = new MonoCreature(gamete[0], gamete[gameteFuseBothWith0]);                                //Creates two new MonoCreatures which are a result of gene1 of parent1 and gene1,2 of parent2
                        z++;
                    }
                    for (int gameteFuseBothWith1 = 2; gameteFuseBothWith1 < 4; gameteFuseBothWith1++) {                         //Iterates over both genes of p2
                        offSpring[z] = new MonoCreature(gamete[1], gamete[gameteFuseBothWith1]);                                //Creates two new MonoCreatures which are a result of gene2 of p1 and g1,2 of p2
                        z++;
                    }
                }*/